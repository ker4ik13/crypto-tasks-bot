generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int              @id @default(autoincrement())
  telegramId            String           @unique
  firstName             String
  lastName              String?
  username              String?
  languageCode          String?
  isAdmin               Boolean?         @default(false)
  currentBalance        Float            @default(0)
  outputBalance         Float            @default(0)
  payments              Payment[]
  createdDate           DateTime         @default(now()) @db.Date
  isBlockedTheBot       Boolean?         @default(false)
  warningsCount         Int              @default(0)
  dateOfLastDailyReward DateTime?        @db.Date
  invitedBy             Referral?        @relation("InvitedUsers", fields: [invitedById], references: [id])
  invitedById           Int?
  referral              Referral?        @relation("ReferralOwner")
  mining                Mining?          @relation("UserMining")
  sponsorChannels       SponsorChannel[] @relation("SubsUsers")
}

model Mining {
  id                Int     @id @default(autoincrement())
  isEnabled         Boolean @default(false)
  countPerSecond    Float   @default(0.000001)
  currentBalance    Float   @default(0)
  collectedBalance  Float   @default(0)
  dateOfLastReceipt String
  owner             User    @relation("UserMining", fields: [ownerId], references: [id])
  ownerId           Int     @unique
}

model Payment {
  id          Int            @id @default(autoincrement())
  date        DateTime       @db.Date
  requestDate DateTime       @default(now()) @db.Date
  amount      Float
  currency    String
  status      WithdrawStatus @default(pending)
  userId      Int
  user        User           @relation(fields: [userId], references: [id])
}

model Referral {
  id   Int    @id @default(autoincrement())
  code String @unique

  // Владелец реферального кода (приглашающий пользователь)
  owner   User @relation("ReferralOwner", fields: [ownerId], references: [id])
  ownerId Int  @unique

  // Пользователи, приглашённые по данному реферальному коду
  invitedUsers User[] @relation("InvitedUsers")
}

model Promocode {
  id         Int     @id @default(autoincrement())
  promo      String  @unique
  amount     Float
  currency   String
  usageLimit Int
  usageCount Int     @default(0)
  isActive   Boolean @default(true)
}

model SponsorChannel {
  id             Int                @id @default(autoincrement())
  channelName    String
  channelLink    String
  channelSlug    String             @unique
  isActive       Boolean            @default(true)
  createdDate    DateTime           @default(now()) @db.Date
  expirationDate DateTime           @db.Date
  sponsorName    String
  sponsorLink    String
  reward         Float
  type           SponsorChannelType
  subsUsers      User[]             @relation("SubsUsers")
}

model Contact {
  id          Int      @id @default(autoincrement())
  contactName String
  contactLink String
  isActive    Boolean  @default(true)
  createdDate DateTime @default(now()) @db.Date
}

enum WithdrawStatus {
  pending
  success
  failed
}

enum SponsorChannelType {
  start
  task
  all
}
